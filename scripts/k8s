#!/usr/bin/env bash

# k8s-manager.sh
# Interactive Kubernetes pod management using fzf

set -e

# Default values
CONTEXT="staging"
DEFAULT_PORT="4001:4001"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

print_action() {
  echo -e "${CYAN}[ACTION]${NC} $1"
}

# Check if required tools are installed
check_dependencies() {
  if ! command -v kubectl &>/dev/null; then
    print_error "kubectl is not installed or not in PATH"
    exit 1
  fi

  if ! command -v fzf &>/dev/null; then
    print_error "fzf is not installed or not in PATH"
    exit 1
  fi
}

# Function to get deployments
get_deployments() {
  local context=$1
  print_info "Fetching deployments from context: $context"

  kubectl --context "$context" get deployments -o custom-columns=NAME:.metadata.name,READY:.status.readyReplicas,AVAILABLE:.status.availableReplicas,AGE:.metadata.creationTimestamp --no-headers 2>/dev/null || {
    print_error "Failed to get deployments. Check your context and permissions."
    exit 1
  }
}

# Function to get pods for a specific deployment
get_pods_for_deployment() {
  local context=$1
  local deployment=$2

  print_info "Fetching pods for deployment: $deployment"

  # Get the deployment's selector labels
  local selector=$(kubectl --context "$context" get deployment "$deployment" -o jsonpath='{.spec.selector.matchLabels}' 2>/dev/null)

  if [[ -z "$selector" ]]; then
    print_error "Could not get selector for deployment: $deployment"
    exit 1
  fi

  # Convert JSON selector to label selector format
  local label_selector=$(echo "$selector" | sed 's/[{}"]//g' | sed 's/:/=/g' | sed 's/,/,/g')

  kubectl --context "$context" get pods -l "$label_selector" -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,READY:.status.containerStatuses[0].ready,RESTARTS:.status.containerStatuses[0].restartCount,AGE:.metadata.creationTimestamp --no-headers 2>/dev/null || {
    print_error "Failed to get pods for deployment: $deployment"
    exit 1
  }
}

# Function to select action
select_action() {
  # This function should only return the selected action, not print info messages.
  local actions="🚀 port-forward - Forward a local port to the pod
📝 logs - View pod logs (with follow option)
🔍 logs-previous - View logs from previous container instance
💻 exec - Execute interactive shell in the pod
📊 describe - Get detailed pod information
📋 yaml - Get pod YAML configuration
🔄 restart - Restart the deployment
📈 top - Show resource usage (CPU/Memory)
🐛 debug - Start debug container (ephemeral)"

  local selected_action_raw=$(echo "$actions" | fzf --height=60% --layout=reverse --border --prompt="Select action: " --header="Available Actions" | awk '{print $2}')

  # Check if selected_action_raw is empty, if so, it means fzf was exited without selection
  if [[ -z "$selected_action_raw" ]]; then
    # Indicate no selection by echoing an empty string and let the caller handle it.
    # Or you could exit here, but letting the caller handle it is more flexible.
    echo ""
  else
    echo "$selected_action_raw"
  fi
}

# Function to get container name if multiple containers exist
get_container_name() {
  local context=$1
  local pod=$2

  local containers=$(kubectl --context "$context" get pod "$pod" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null)

  if [[ -z "$containers" ]]; then
    print_error "Could not get containers for pod: $pod"
    exit 1
  fi

  local container_count=$(echo "$containers" | wc -w)

  if [[ $container_count -eq 1 ]]; then
    echo "$containers"
  else
    print_info "Multiple containers found. Select one:"
    local selected_container=$(echo "$containers" | tr ' ' '\n' | fzf --height=40% --layout=reverse --border --prompt="Select container: ")
    echo "$selected_container"
  fi
}

# Action functions
action_port_forward() {
  local context=$1
  local pod=$2

  local suggested_port=""

  # Try to find exposed container ports
  # This fetches all container ports and joins them with a space
  local exposed_ports=$(kubectl --context "$context" get pod "$pod" -o jsonpath='{.spec.containers[*].ports[*].containerPort}' 2>/dev/null)

  if [[ -n "$exposed_ports" ]]; then
    # Pick the first one as a suggestion
    suggested_port=$(echo "$exposed_ports" | awk '{print $1}')
    print_info "Found exposed pod port: ${suggested_port}"
    DEFAULT_PORT="${suggested_port}:${suggested_port}" # Set default to discovered port
  else
    print_warning "No exposed container ports found for pod: $pod. Using default 4001:4001."
    DEFAULT_PORT="4001:4001" # Fallback if no ports are found
  fi

  echo
  print_info "Enter port mapping (format: local:remote, e.g., 4001:4001)"
  read -p "Port mapping [${DEFAULT_PORT}]: " port_input

  local port_mapping=${port_input:-$DEFAULT_PORT}

  if [[ ! "$port_mapping" =~ ^[0-9]+:[0-9]+$ ]]; then
    print_error "Invalid port mapping format. Use format: local:remote (e.g., 4001:4001)"
    exit 1
  fi

  print_action "Starting port forwarding: $port_mapping"
  print_success "Port forwarding active! Press Ctrl+C to stop."
  echo

  kubectl --context "$context" port-forward "$pod" "$port_mapping"
}

action_logs() {
  local context=$1
  local pod=$2

  local container=$(get_container_name "$context" "$pod")
  if [[ -z "$container" ]]; then
    exit 1
  fi

  echo
  print_info "Log options:"
  echo "1) View recent logs"
  echo "2) Follow logs (real-time)"
  echo "3) View logs with tail (specify number of lines)"
  read -p "Select option [1-3]: " log_option

  case $log_option in
  1)
    print_action "Viewing recent logs for container: $container"
    kubectl --context "$context" logs "$pod" -c "$container"
    ;;
  2)
    print_action "Following logs for container: $container (Press Ctrl+C to stop)"
    kubectl --context "$context" logs -f "$pod" -c "$container"
    ;;
  3)
    read -p "Number of lines to tail [100]: " tail_lines
    tail_lines=${tail_lines:-100}
    print_action "Viewing last $tail_lines lines for container: $container"
    kubectl --context "$context" logs --tail="$tail_lines" "$pod" -c "$container"
    ;;
  *)
    print_action "Viewing recent logs for container: $container"
    kubectl --context "$context" logs "$pod" -c "$container"
    ;;
  esac
}

action_logs_previous() {
  local context=$1
  local pod=$2

  local container=$(get_container_name "$context" "$pod")
  if [[ -z "$container" ]]; then
    exit 1
  fi

  print_action "Viewing previous logs for container: $container"
  kubectl --context "$context" logs --previous "$pod" -c "$container" || {
    print_warning "No previous container instance found for this pod"
  }
}

action_exec() {
  local context=$1
  local pod=$2

  local container=$(get_container_name "$context" "$pod")
  if [[ -z "$container" ]]; then
    exit 1
  fi

  echo
  print_info "Shell options:"
  echo "1) /bin/bash"
  echo "2) /bin/sh"
  echo "3) Custom command"
  read -p "Select option [1-3]: " shell_option

  case $shell_option in
  1)
    print_action "Starting interactive bash session in container: $container"
    kubectl --context "$context" exec -it "$pod" -c "$container" -- /bin/bash
    ;;
  2)
    print_action "Starting interactive sh session in container: $container"
    kubectl --context "$context" exec -it "$pod" -c "$container" -- /bin/sh
    ;;
  3)
    read -p "Enter command to execute: " custom_command
    print_action "Executing command in container: $container"
    kubectl --context "$context" exec -it "$pod" -c "$container" -- $custom_command
    ;;
  *)
    print_action "Starting interactive bash session in container: $container"
    kubectl --context "$context" exec -it "$pod" -c "$container" -- /bin/bash
    ;;
  esac
}

action_describe() {
  local context=$1
  local pod=$2

  print_action "Describing pod: $pod"
  kubectl --context "$context" describe pod "$pod"
}

action_yaml() {
  local context=$1
  local pod=$2

  print_action "Getting YAML for pod: $pod"
  kubectl --context "$context" get pod "$pod" -o yaml
}

action_restart() {
  local context=$1
  local deployment=$2

  echo
  read -p "Are you sure you want to restart deployment '$deployment'? [y/N]: " confirm

  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    print_action "Restarting deployment: $deployment"
    kubectl --context "$context" rollout restart deployment "$deployment"
    kubectl --context "$context" rollout status deployment "$deployment"
  else
    print_warning "Restart cancelled"
  fi
}

action_top() {
  local context=$1
  local pod=$2

  print_action "Showing resource usage for pod: $pod"
  kubectl --context "$context" top pod "$pod" --containers || {
    print_warning "Metrics server might not be available or pod metrics not ready"
  }
}

action_debug() {
  local context=$1
  local pod=$2

  echo
  print_info "Debug container options:"
  echo "1) Use busybox image"
  echo "2) Use debian image"
  echo "3) Custom debug image"
  read -p "Select option [1-3]: " debug_option

  local debug_image=""
  case $debug_option in
  1)
    debug_image="busybox"
    ;;
  2)
    debug_image="debian"
    ;;
  3)
    read -p "Enter debug image name: " debug_image
    ;;
  *)
    debug_image="busybox"
    ;;
  esac

  print_action "Starting debug container with image: $debug_image"
  kubectl --context "$context" debug -it "$pod" --image="$debug_image" || {
    print_error "Debug command failed. Make sure your cluster supports ephemeral containers"
  }
}

# Main function
main() {
  local help_flag=false

  # Parse command line arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
    --context | -c)
      CONTEXT="$2"
      shift 2
      ;;
    --help | -h)
      help_flag=true
      shift
      ;;
    *)
      print_error "Unknown option: $1"
      help_flag=true
      shift
      ;;
    esac
  done

  if [[ "$help_flag" == true ]]; then
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Interactive Kubernetes pod management with multiple actions"
    echo ""
    echo "Options:"
    echo "  -c, --context CONTEXT    Kubernetes context to use (default: staging)"
    echo "  -h, --help              Show this help message"
    echo ""
    echo "Available Actions:"
    echo "  • Port Forward    - Forward local port to pod"
    echo "  • Logs           - View pod logs with various options"
    echo "  • Logs Previous  - View logs from previous container"
    echo "  • Exec           - Execute interactive shell"
    echo "  • Describe       - Get detailed pod information"
    echo "  • YAML           - Get pod YAML configuration"
    echo "  • Restart        - Restart the deployment"
    echo "  • Top            - Show resource usage"
    echo "  • Debug          - Start ephemeral debug container"
    echo ""
    echo "Examples:"
    echo "  $0                      # Use default staging context"
    echo "  $0 --context production # Use production context"
    exit 0
  fi

  check_dependencies

  print_info "Using Kubernetes context: $CONTEXT"
  echo

  # Step 1: Select deployment
  print_info "Step 1: Select a deployment"
  local deployments=$(get_deployments "$CONTEXT")

  if [[ -z "$deployments" ]]; then
    print_warning "No deployments found in context: $CONTEXT"
    exit 0
  fi

  local selected_deployment=$(echo "$deployments" | fzf --height=40% --layout=reverse --border --prompt="Select deployment: " --header="NAME                READY  AVAILABLE  AGE" | awk '{print $1}')

  if [[ -z "$selected_deployment" ]]; then
    print_warning "No deployment selected. Exiting."
    exit 0
  fi

  print_success "Selected deployment: $selected_deployment"
  echo

  # Step 2: Select pod
  print_info "Step 2: Select a pod from deployment: $selected_deployment"
  local pods=$(get_pods_for_deployment "$CONTEXT" "$selected_deployment")

  if [[ -z "$pods" ]]; then
    print_warning "No pods found for deployment: $selected_deployment"
    exit 0
  fi

  local selected_pod=$(echo "$pods" | fzf --height=40% --layout=reverse --border --prompt="Select pod: " --header="NAME                     STATUS   READY  RESTARTS  AGE" | awk '{print $1}')

  if [[ -z "$selected_pod" ]]; then
    print_warning "No pod selected. Exiting."
    exit 0
  fi

  print_success "Selected pod: $selected_pod"
  echo

  # Step 3: Select action
  local selected_action=$(select_action)
  print_success "Selected action: $selected_action"

  # Execute the selected action
  case $selected_action in
  "port-forward")
    action_port_forward "$CONTEXT" "$selected_pod"
    ;;
  "logs")
    action_logs "$CONTEXT" "$selected_pod"
    ;;
  "logs-previous")
    action_logs_previous "$CONTEXT" "$selected_pod"
    ;;
  "exec")
    action_exec "$CONTEXT" "$selected_pod"
    ;;
  "describe")
    action_describe "$CONTEXT" "$selected_pod"
    ;;
  "yaml")
    action_yaml "$CONTEXT" "$selected_pod"
    ;;
  "restart")
    action_restart "$CONTEXT" "$selected_deployment"
    ;;
  "top")
    action_top "$CONTEXT" "$selected_pod"
    ;;
  "debug")
    action_debug "$CONTEXT" "$selected_pod"
    ;;
  *)
    print_error "Unknown action: $selected_action"
    exit 1
    ;;
  esac
}

# Run main function with all arguments
main "$@"
