#!/usr/bin/env bash
set -euo pipefail

# Colors for previews
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

# Get list of worktree paths
git_worktree_list() {
  git worktree list --porcelain |
    awk '/worktree/ {print $2}'
}

# List worktrees with branch + commit
git_worktree_table() {
  git worktree list --porcelain |
    awk '
      BEGIN {printf "%-40s %-20s %s\n", "Worktree", "Branch", "Commit"}
      /worktree/ {wt=$2}
      /branch/ {sub("refs/heads/","",$2); br=$2}
      /HEAD/ {printf "%-40s %-20s %s\n", wt, br, $2}
    '
}

# fzf preview: show git log for branch in worktree
preview_log() {
  local dir="$1"
  if [[ -d "$dir/.git" || -f "$dir/.git" ]]; then
    (cd "$dir" && git log --oneline --graph --decorate --color=always -n 15)
  else
    echo "Not a valid worktree"
  fi
}

# Create a worktree
cmd_create() {
  read -rp "Branch name (will create if missing): " branch
  read -rp "Directory for worktree: " newdir
  if ! git show-ref --verify --quiet "refs/heads/$branch"; then
    git branch "$branch"
  fi
  git worktree add "$newdir" "$branch"
}

# Remove a worktree
cmd_remove() {
  local dir
  dir=$(git_worktree_list | fzf --prompt="Remove worktree> " \
    --preview 'preview_log {}') || return
  [[ "$dir" == "$(pwd)" ]] && {
    echo "Can't remove the current worktree"
    return 1
  }
  git worktree remove "$dir"
}

# Switch to a worktree
cmd_switch() {
  local dir
  dir=$(git_worktree_list | fzf --prompt="Switch to worktree> " \
    --preview 'preview_log {}') || return
  cd "$dir" || return
  exec $SHELL
}

# Visualize all worktrees
cmd_list() {
  git_worktree_table | fzf --prompt="Worktrees> " \
    --preview 'preview_log $(echo {} | awk "{print \$1}")'
}

# Main interactive menu
cmd_menu() {
  local choice
  choice=$(
    printf "list\nswitch\ncreate\nremove" |
      fzf --prompt="wt> " \
        --header="${YELLOW}Git Worktree Manager${RESET}" \
        --preview 'case {} in
            list) git worktree list --porcelain ;;
            switch) echo "Switch to a worktree" ;;
            create) echo "Create a new worktree" ;;
            remove) echo "Remove a worktree" ;;
        esac'
  ) || return

  case "$choice" in
  list) cmd_list ;;
  switch) cmd_switch ;;
  create) cmd_create ;;
  remove) cmd_remove ;;
  esac
}

# Entry point
main() {
  if [[ $# -eq 0 ]]; then
    cmd_menu
  else
    case "$1" in
    list) cmd_list ;;
    switch) cmd_switch ;;
    create) cmd_create ;;
    remove) cmd_remove ;;
    *) echo "Unknown command: $1" ;;
    esac
  fi
}

main "$@"
